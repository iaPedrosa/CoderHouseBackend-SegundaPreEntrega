<!-- index.html -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-dark@5/dark.css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

{{>header}}
<h1 class="text-center text-primary">LISTA DE PRODUCTOS</h1>



  {{#if user}}
      
        <h3 style="color: aliceblue;" class="text-center">Usuario: {{user}} Rol: {{role}}</h3>
            
        </div>
        {{/if}}

        

<section class="mx-5">
    <div class="container">
        <div class="justify-content-center">
            <div class="text-center mb-4">
                <a href="realtimeproducts" class="btn btn-info" role="button">Ir a RealTimeProducts</a>
                <a href="/cart/{{cartID}}" class="btn btn-success" role="button">Ir al Carrito</a>
            </div>
            {{#if error}}
            <h2 class="text-center text-danger m-5">{{error}}</h2>
            {{else}}
            <div class="container mt-3">
                <div class="row">
                    <div class="col-md-4">
                        <label for="categorySelect" class="form-label">Buscar por categoría:</label>
                        <select class="form-select" id="categorySelect">
                            <option value="">Todas las categorías</option>
                            {{#each categories}}
                            <option value="{{this}}">{{this}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="statusSelect" class="form-label">Buscar por estado:</label>
                        <select class="form-select" id="statusSelect">
                            <option value="">Todos los estados</option>
                            <option value="true">Disponible</option>
                            <option value="false">No disponible</option>
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label for="sortSelect" class="form-label">Ordenar por precio:</label>
                        <select class="form-select" id="sortSelect">
                            <option value="asc">Ascendente</option>
                            <option value="desc">Descendente</option>
                        </select>
                    </div>
                </div>
                <div class="row mt-2">
                    <div class="col-md-3">
                       
                    </div>
                    <div class="col-md-6">
                        <button type="button" class="btn btn-primary mt-2" onclick="search()">Buscar</button>
                    </div>
                </div>
            </div>
            <br>

            <div class="table-responsive">
                <table class="table table-striped table-bordered table-sm table-dark border-secondary">
                    <thead>
                        <tr>
                            <th scope="col">Título</th>
                            <th scope="col">Descripción</th>
                            <th scope="col">Codigo</th>
                            <th scope="col">Precio</th>
                            <th scope="col">Stock</th>
                            <th scope="col">Categoría</th>
                            <th scope="col">Estado</th>
                            <th scope="col">ID</th>
                            <th scope="col">Cart</th>
                            {{#if admin}}
                            <th scope="col">Eliminar</th>
                            {{/if}}
                        </tr>
                    </thead>
                    <tbody>
                       
                        {{#each products}}
                        <tr>
                            <td>{{this.title}}</td>
                            <td>{{this.description}}</td>
                            <td>{{this.code}}</td>
                            <td>${{this.price}}</td>
                            <td>{{this.stock}}</td>
                            <td>{{this.category}}</td>
                            <td>{{this.status}}</td>
                            <td>{{this.id}}</td>
                            <td>
                                <form action="api/carts/{{../cartID}}/products/{{this.id}}" method="post"
                                    class="post-form">
                                    <button type="submit" class="btn btn-info">Agregar</button>
                                </form>
                            </td>
                           {{#if ../admin}}
                            <td>
                                  <button class="btn btn-danger" onclick="eliminarProducto('{{this.id}}')">X</button>
                            </td>
                            {{/if}}
                            
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
        {{/if}}
    </div>
</section>
<div class="d-flex justify-content-center mt-3">
    {{#if prevPage}}
    <a class="btn btn-info mr-5" href={{prevPage}}>Anterior página</a>
    {{/if}}

    {{#if nextPage}}
    <a class="btn btn-info" href={{nextPage}}>Siguiente página</a>
    {{/if}}
</div>

   
    <script>

        function search() {
       
        const categorySelect = document.getElementById('categorySelect');
        const statusSelect = document.getElementById('statusSelect');
        const sortSelect = document.getElementById('sortSelect');

        let url = '/products/?';

       
        if (categorySelect.value !== '') {
            url += `filter=category&filterValue=${encodeURIComponent(categorySelect.value)}&`;
        }

        if (statusSelect.value !== '') {
            url += `status=${encodeURIComponent(statusSelect.value)}&`;
        }

        if (sortSelect.value !== '') {
            url += `sort=${encodeURIComponent(sortSelect.value)}&`;
        }

        // Eliminamos el último '&' de la URL si se agregaron parámetros
        if (url.endsWith('&')) {
            url = url.slice(0, -1);
        }

        // Redirigimos a la URL de búsqueda
        window.location.href = url;
    }

        function manejarEnvioFormulario(evento) {
            evento.preventDefault(); 

            const formulario = evento.target;
            const url = formulario.action;
           

            fetch(url, {
                method: 'POST',
            })
                .then(respuesta => respuesta.json())
                .then(datos => {
           
                    if (datos.error) {

                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: datos.error,

                        })
                    } else {
                        Swal.fire('Producto agregado al carrito')
                    }







                })
                .catch(error => {

                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Ocurrió un error durante la solicitud POST.',

                    })
                    console.error('Error:', error);
                });
        }

      

    
    

   document.addEventListener('DOMContentLoaded', () => {
       
            const formularios = document.querySelectorAll('form.post-form');
            formularios.forEach(formulario => {
                formulario.addEventListener('submit', manejarEnvioFormulario);
            });
        });

         

        const categorySelect = document.getElementById('categorySelect');
        const statusSelect = document.getElementById('statusSelect');

    function eliminarProducto(productID) {
    Swal.fire({
        title: '¿Estás seguro?',
        text: 'Esta acción eliminará el producto permanentemente.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            const deleteURL = `api/products/${productID}`;

            fetch(deleteURL, {
                method: 'DELETE'
            })
            //console log de la response
            
            .then(response => response.json())
            .then(datos => {
           
                    if (datos.error) {

                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: datos.error,

                        })
                    } else {
                        Swal.fire({
                            icon: 'success',
                            title: 'Producto eliminado',
                            text: datos.producto.title,

                        }).then(() => {
                            // Recargar la página después de mostrar el mensaje
                            location.reload();
                        });
                    }


                })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ocurrió un error durante la solicitud DELETE.'
                });
            });
        }
    });
}
       

    </script>

